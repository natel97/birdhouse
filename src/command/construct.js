const jsyaml = require("js-yaml");
const fs = require("fs");
const messages = require("../utils/messages");

const readFile = () => {
  const location = process.cwd() + "/.birdhouse.yml";
  if (!fs.existsSync(location)) {
    messages.FILE_NOT_FOUND();
    throw "ERROR";
  }

  const file = fs.readFileSync(location);
  return file;
};

const convertToYaml = async file => {
  const error = "";
  const json = await jsyaml.load(file, { onWarning: e => (error = e) });

  if (error) {
    console.log(error);
    throw error;
  }
  console.log(JSON.stringify(json, null, 2));
  return json;
};

const generateEntities = json => {};

const generateServices = json => {};

const generateControllers = json => {};

const createApplication = (entities, services, controllers) => {};

const createErFile = (json) => {
  var er = "";
  var relationship = "";
  if (json === {}){
    return json
  }
  else{
  for (x in json.api) {
    er = er + `[` + x `] \n` + `*id {label: "`+x.primary-key.id+`, not null, autogenerated} \n`
    notes = ``
    for( y in x.schema){
      notes = notes + `*+` + y + ` {label: "` + x.schema[y] + `"} \n` //add more for not null
    }
    er = er + notes
    for(z in x.has-one){
      relationship = relationship + x + `    1--1 ` + z + `\n`
    }
    for(z in x.has-many){
      relationship = relationship + x + `    1--* ` + z + `\n`
    }
    for(c in json.api.routes){
      if(x ===  c){
        for(calls in json.api.routes.c){
          notes = notes + calls + `{ label:`+ x.primary-key.id + `} \n`//special case for deleted needed
        }
      }
    }
  }
  return er + relationship
}
}

const construct = async () => {
  const file = readFile();
  const json = convertToYaml(file);
  const er = createErFile(json)
  const entities = generateEntities(json);
  const services = generateServices(json);
  const controllers = generateControllers(json);
  return createApplication(entities, services, controllers);
};

module.exports = construct;
