const validateEntity = entity => {
  if (!entity["primary-key"]) {
    console.log("ERROR: Primary key is missing");
    throw "Primary Key missing";
  }

  if (!entity.schema) {
    return [];
  }
};

const mapPrimaryKey = (name, type, hideAutogenerated) => {
  return `
  @ApiModelProperty()
  ${
    !hideAutogenerated
      ? `@PrimaryGeneratedColumn(${type === "string" ? "uuid" : ""})`
      : ""
  }
  ${name}: ${type};
`;
};

const parsePrimaryKey = entity => {
  const primaryKeyName = Object.keys(entity["primary-key"])[0];
  const primaryKeyType = entity["primary-key"][primaryKeyName];

  if (typeof primaryKeyType === "string") {
    return mapPrimaryKey(primaryKeyName, primaryKeyType);
  } else if (typeof primaryKeyType === "object") {
    return mapPrimaryKey(
      primaryKeyName,
      primaryKeyType.type,
      primaryKeyType.autogenerated === false
    );
  } else {
    console.log("Error: primary key");
    throw "Primary key error";
  }
};

const parseRelations = entity => {
  const relations = [];
  if (entity["has-one"]) {
  }

  if (entity["one-to-many"]) {
  }

  if (entity["many-to-one"]) {
  }

  return relations;
};

const parseFields = entity => {
  if (!entity.schema) return [];
  return Object.keys(entity.schema).map(
    key => `
  @Column()
  @ApiModelProperty()
  ${key}: ${entity.schema[key]}
  `
  );
};

const getImports = entity => {
  return [];
};

const parseEntityData = (entity, name) => {
  console.log("Parsing entity:", name);
  validateEntity(entity);
  const imports = getImports(entity);
  const primaryKey = parsePrimaryKey(entity);
  const fields = parseFields(entity);
  const relations = parseRelations(entity);

  return `
${imports}

// Autogenerated with 🐦🏠 (and of course <3)
export default class ${name} {
  
  ${primaryKey}
  
  ${fields}

  ${relations}
}
`;
};

module.exports = parseEntityData;
