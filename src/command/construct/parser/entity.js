const upper = word => word.charAt(0).toUpperCase() + word.slice(1);

const validateEntity = entity => {
  if (!entity["primary-key"]) {
    console.log("ERROR: Primary key is missing");
    throw "Primary Key missing";
  }

  if (!entity.schema) {
    return [];
  }
};

const mapPrimaryKey = (name, type, hideAutogenerated) => {
  return `
  @ApiModelProperty()
  ${
    !hideAutogenerated
      ? `@PrimaryGeneratedColumn(${type === "string" ? "'uuid'" : ""})`
      : ""
  }
  ${name}: ${type};
`;
};

const parsePrimaryKey = entity => {
  const primaryKeyName = Object.keys(entity["primary-key"])[0];
  const primaryKeyType = entity["primary-key"][primaryKeyName];

  if (typeof primaryKeyType === "string") {
    return mapPrimaryKey(primaryKeyName, primaryKeyType);
  } else if (typeof primaryKeyType === "object") {
    return mapPrimaryKey(
      primaryKeyName,
      primaryKeyType.type,
      primaryKeyType.autogenerated === false
    );
  } else {
    console.log("Error: primary key");
    throw "Primary key error";
  }
};

const parseRelations = (entity, name) => {
  const relations = [];
  if (entity["one-to-many"]) {
    entity["one-to-many"]
      .map(
        other => `
    @OneToMany(() => ${upper(other)}, i => i.${name})
    @ApiModelProperty()
    user: ${upper(other)}Entity;
    `
      )
      .forEach(str => relations.push(str));
  }

  if (entity["many-to-one"]) {
    entity["many-to-one"].map(
      other => `
    @ManyToOne(() => ${upper(other)}, p => p.${name})
    @JoinColumn({ name: '${other}Id' })
    @ApiModelProperty()
    ${other}: ${upper(other)};
  
    @Column({ name: '${other}Id' })
    @ApiModelProperty()
    ${other}Id: string;
    `
    );
  }

  return relations;
};

const parseFields = entity => {
  if (!entity.schema) return [];
  return Object.keys(entity.schema).map(
    key => `
  @Column()
  @ApiModelProperty()
  ${key}: ${entity.schema[key]}
  `
  );
};

const getImports = entity => {
  return [
    "import { ApiModelProperty } from '@nestjs/swagger';",
    `import {
    Entity,
    Column,
    PrimaryGeneratedColumn,
    ManyToOne,
    JoinColumn,
  } from 'typeorm';`
  ];
};

const parseEntityData = (entity, name) => {
  console.log("Parsing entity:", name);
  validateEntity(entity);
  const imports = getImports(entity);
  const primaryKey = parsePrimaryKey(entity);
  const fields = parseFields(entity);
  const relations = parseRelations(entity, name);

  return `
${imports}

// Autogenerated with 🐦🏠 (and of course <3)
@Entity()
export default class ${upper(name)}Entity {
  
  ${primaryKey}
  
  ${fields.join("\n")}

  ${relations.join("\n")}
}
`;
};

module.exports = parseEntityData;
